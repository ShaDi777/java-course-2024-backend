/*
 * This file is generated by jOOQ.
 */
package edu.java.dao.jooq.generated.tables;


import edu.java.dao.jooq.generated.Keys;
import edu.java.dao.jooq.generated.Public;
import edu.java.dao.jooq.generated.tables.Chat.ChatPath;
import edu.java.dao.jooq.generated.tables.LinkChat.LinkChatPath;
import edu.java.dao.jooq.generated.tables.LinkStackoverflow.LinkStackoverflowPath;
import edu.java.dao.jooq.generated.tables.records.LinkRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Link extends TableImpl<LinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.link</code>
     */
    public static final Link LINK = new Link();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<LinkRecord> getRecordType() {
        return LinkRecord.class;
    }

    /**
     * The column <code>public.link.link_id</code>.
     */
    public final TableField<LinkRecord, Long> LINK_ID = createField(DSL.name("link_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.link.url</code>.
     */
    public final TableField<LinkRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.link.last_modified</code>.
     */
    public final TableField<LinkRecord, OffsetDateTime> LAST_MODIFIED = createField(DSL.name("last_modified"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.link.last_checked</code>.
     */
    public final TableField<LinkRecord, OffsetDateTime> LAST_CHECKED = createField(DSL.name("last_checked"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("'1970-01-01 00:00:00'::timestamp without time zone"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Link(Name alias, Table<LinkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Link(Name alias, Table<LinkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.link</code> table reference
     */
    public Link(String alias) {
        this(DSL.name(alias), LINK);
    }

    /**
     * Create an aliased <code>public.link</code> table reference
     */
    public Link(Name alias) {
        this(alias, LINK);
    }

    /**
     * Create a <code>public.link</code> table reference
     */
    public Link() {
        this(DSL.name("link"), null);
    }

    public <O extends Record> Link(Table<O> path, ForeignKey<O, LinkRecord> childPath, InverseForeignKey<O, LinkRecord> parentPath) {
        super(path, childPath, parentPath, LINK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LinkPath extends Link implements Path<LinkRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LinkPath(Table<O> path, ForeignKey<O, LinkRecord> childPath, InverseForeignKey<O, LinkRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LinkPath(Name alias, Table<LinkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LinkPath as(String alias) {
            return new LinkPath(DSL.name(alias), this);
        }

        @Override
        public LinkPath as(Name alias) {
            return new LinkPath(alias, this);
        }

        @Override
        public LinkPath as(Table<?> alias) {
            return new LinkPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public Identity<LinkRecord, Long> getIdentity() {
        return (Identity<LinkRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<LinkRecord> getPrimaryKey() {
        return Keys.LINK_PKEY;
    }

    @Override
    @NotNull
    public List<UniqueKey<LinkRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LINK_URL_KEY);
    }

    private transient LinkChatPath _linkChat;

    /**
     * Get the implicit to-many join path to the <code>public.link_chat</code>
     * table
     */
    public LinkChatPath linkChat() {
        if (_linkChat == null)
            _linkChat = new LinkChatPath(this, null, Keys.LINK_CHAT__LINK_CHAT_LINK_ID_FKEY.getInverseKey());

        return _linkChat;
    }

    private transient LinkStackoverflowPath _linkStackoverflow;

    /**
     * Get the implicit to-many join path to the
     * <code>public.link_stackoverflow</code> table
     */
    public LinkStackoverflowPath linkStackoverflow() {
        if (_linkStackoverflow == null)
            _linkStackoverflow = new LinkStackoverflowPath(this, null, Keys.LINK_STACKOVERFLOW__LINK_STACKOVERFLOW_LINK_ID_FKEY.getInverseKey());

        return _linkStackoverflow;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.chat</code>
     * table
     */
    public ChatPath chat() {
        return linkChat().chat();
    }

    @Override
    @NotNull
    public Link as(String alias) {
        return new Link(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Link as(Name alias) {
        return new Link(alias, this);
    }

    @Override
    @NotNull
    public Link as(Table<?> alias) {
        return new Link(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(String name) {
        return new Link(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(Name name) {
        return new Link(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Link rename(Table<?> name) {
        return new Link(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link where(Condition condition) {
        return new Link(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Link where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Link where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Link where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Link where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Link whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
